// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatservice_SenderMessage_FullMethodName    = "/Chatservice/SenderMessage"
	Chatservice_ReceiverMessages_FullMethodName = "/Chatservice/ReceiverMessages"
	Chatservice_UserPresence_FullMethodName     = "/Chatservice/UserPresence"
)

// ChatserviceClient is the client API for Chatservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatserviceClient interface {
	SenderMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SenderMessageResponse, error)
	ReceiverMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReceiveMessageRequest, ReceiveMessageRespone], error)
	UserPresence(ctx context.Context, in *UserPresenceRequest, opts ...grpc.CallOption) (*UserPresenceResponse, error)
}

type chatserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatserviceClient(cc grpc.ClientConnInterface) ChatserviceClient {
	return &chatserviceClient{cc}
}

func (c *chatserviceClient) SenderMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SenderMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenderMessageResponse)
	err := c.cc.Invoke(ctx, Chatservice_SenderMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserviceClient) ReceiverMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ReceiveMessageRequest, ReceiveMessageRespone], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatservice_ServiceDesc.Streams[0], Chatservice_ReceiverMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReceiveMessageRequest, ReceiveMessageRespone]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatservice_ReceiverMessagesClient = grpc.ClientStreamingClient[ReceiveMessageRequest, ReceiveMessageRespone]

func (c *chatserviceClient) UserPresence(ctx context.Context, in *UserPresenceRequest, opts ...grpc.CallOption) (*UserPresenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPresenceResponse)
	err := c.cc.Invoke(ctx, Chatservice_UserPresence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatserviceServer is the server API for Chatservice service.
// All implementations must embed UnimplementedChatserviceServer
// for forward compatibility.
type ChatserviceServer interface {
	SenderMessage(context.Context, *SendMessageRequest) (*SenderMessageResponse, error)
	ReceiverMessages(grpc.ClientStreamingServer[ReceiveMessageRequest, ReceiveMessageRespone]) error
	UserPresence(context.Context, *UserPresenceRequest) (*UserPresenceResponse, error)
	mustEmbedUnimplementedChatserviceServer()
}

// UnimplementedChatserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatserviceServer struct{}

func (UnimplementedChatserviceServer) SenderMessage(context.Context, *SendMessageRequest) (*SenderMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SenderMessage not implemented")
}
func (UnimplementedChatserviceServer) ReceiverMessages(grpc.ClientStreamingServer[ReceiveMessageRequest, ReceiveMessageRespone]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiverMessages not implemented")
}
func (UnimplementedChatserviceServer) UserPresence(context.Context, *UserPresenceRequest) (*UserPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPresence not implemented")
}
func (UnimplementedChatserviceServer) mustEmbedUnimplementedChatserviceServer() {}
func (UnimplementedChatserviceServer) testEmbeddedByValue()                     {}

// UnsafeChatserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatserviceServer will
// result in compilation errors.
type UnsafeChatserviceServer interface {
	mustEmbedUnimplementedChatserviceServer()
}

func RegisterChatserviceServer(s grpc.ServiceRegistrar, srv ChatserviceServer) {
	// If the following call pancis, it indicates UnimplementedChatserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatservice_ServiceDesc, srv)
}

func _Chatservice_SenderMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserviceServer).SenderMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatservice_SenderMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserviceServer).SenderMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatservice_ReceiverMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatserviceServer).ReceiverMessages(&grpc.GenericServerStream[ReceiveMessageRequest, ReceiveMessageRespone]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatservice_ReceiverMessagesServer = grpc.ClientStreamingServer[ReceiveMessageRequest, ReceiveMessageRespone]

func _Chatservice_UserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserviceServer).UserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatservice_UserPresence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserviceServer).UserPresence(ctx, req.(*UserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatservice_ServiceDesc is the grpc.ServiceDesc for Chatservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chatservice",
	HandlerType: (*ChatserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SenderMessage",
			Handler:    _Chatservice_SenderMessage_Handler,
		},
		{
			MethodName: "UserPresence",
			Handler:    _Chatservice_UserPresence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiverMessages",
			Handler:       _Chatservice_ReceiverMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
